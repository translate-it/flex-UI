<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 		  
		  xmlns:projectservice="services.projectservice.*"
		  xmlns:valueObjects="valueObjects.*" 
		  xmlns:project="com.amadeus.ori.translate.ui.project.*" 
		  xmlns:components="com.amadeus.ori.translate.ui.components.*"
		  width="100%">
	
	<fx:Metadata>
		/**
		*  Dispatched when the project data has been updated
		*
		*  @eventType com.amadeus.ori.translate.ui.project.ProjectEvent.PROJECT_UPDATED
		*/
		[Event(name="projectUpdated", type="com.amadeus.ori.translate.ui.project.ProjectEvent")]
		[ResourceBundle("languages")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[ 
			import com.amadeus.ori.translate.Configuration;
			import com.amadeus.ori.translate.LanguageSelectItem;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.core.FlexGlobals;
			import mx.events.DataGridEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import valueObjects.Project;
			import valueObjects.ProjectResult;
			
			
			[Bindable]
			private static var availableLanguageCodes:ArrayCollection = Configuration.availableLanguageCodes;
			
			[Bindable]
			private static var projectLanguageCodes:ArrayCollection = new ArrayCollection( );
			
			[Bindable]
			private var _project:Project;
			
			private function getLanguageName(item:Object, item2:Object):String {
				return StringUtil.substitute("{1} - {0} ", resourceManager.getString("languages", item.language) , item.language);
			}	
			
			private function moveTo(source:DataGrid, destination:DataGrid):Boolean {
				var targetItems:Array;
				
				if(source.selectedItems != null) {
					targetItems = source.selectedItems;
				}
				
				for each(var item:Object in targetItems) {
					destination.dataProvider.addItem(source.dataProvider.removeItemAt(source.dataProvider.getItemIndex(item)));
					
				}
				
				source.selectedItem = null; // The item has been removed so make sure selectedItem is reset.
				
				// Return Success Indicator
				return true;
			}		
			
			public function set project(project:Project):void
			{
				//Alert.show(event.result.project.name);
				this._project = project;
				if((_project.languages != null)&&(_project.languages.length > 1)){
					var languages:ArrayCollection = new ArrayCollection(_project.languages.split(","));
					var exportLanguages:ArrayCollection = new ArrayCollection(_project.exportLanguages.split(","));
					
					projectLanguageCodes = new ArrayCollection();
					
					for each (var code:String in languages){
						
						trace(code);
						var i:int = 0;
						
						for each (var availableCode:String in availableLanguageCodes){
							if(availableCode == code){
								availableLanguageCodes.removeItemAt(i);									
							}
							i++;
						}
						
						var export:Boolean = false;						
						for each (var exportLangCode:String in exportLanguages){
							if(exportLangCode == code){
								export = true;
								break;							
							}					
						}
						
						projectLanguageCodes.addItem(new LanguageSelectItem(code,export));
					}
					
					projectLanguagesGrid.dispatchEvent(new  DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true,0, null, 0, null, null, 0));
					availableLanguagesGrid.dispatchEvent(new  DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true,0, null, 0, null, null, 0));
					
				} else {
					projectLanguageCodes = new ArrayCollection();
				}
				
			}
			
			
			protected function save_clickHandler(event:MouseEvent):void
			{
				if(Validator.validateAll(validators).length == 0){ 
					//var languages:String = projectLanguageCodes;
					
					var languages:ArrayCollection = new ArrayCollection();
					var exportLanguages:ArrayCollection = new ArrayCollection();
					
					for each (var l:LanguageSelectItem in projectLanguageCodes){
						languages.addItem(l.language);
						if(l.export){
							exportLanguages.addItem(l.language);
						}
					}
					
					updateProjectResult.token = 
						projectService.updateProject(
							FlexGlobals.topLevelApplication.engineBaseUrl,
							_project.id, 
							inputProjectName.text,
							inputProjectDescription.text, 
							languages.toArray().toString(), 
							exportLanguages.toArray().toString(),
							bundleList.dataProvider.toArray().toString());
				} else {
					message.checkFormFields();
				} 	
				
			}			
			
			
			protected function saveProjectResult_resultHandler(event:ResultEvent):void
			{
				var projectResult:ProjectResult = event.result as ProjectResult;
				
				if(projectResult.project != null){
					message.message = "Changes have been saved."; 					
					stage.dispatchEvent(new ProjectEvent(ProjectEvent.PROJECTS_UPDATED, projectResult.project));
				}
			}
			
			protected function btnAddBundle_clickHandler(event:MouseEvent):void
			{
				
				_project.bundleList.addItem(inputNewBundle.text);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<projectservice:ProjectService id="projectService" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<s:CallResponder id="updateProjectResult" result="saveProjectResult_resultHandler(event)"/>
		
		<fx:Array id="validators">			
			
		</fx:Array>	
	</fx:Declarations>	
	
	<s:HGroup width="100%">
		<s:FormItem label="Name" required="true">
			<s:TextInput text="{_project.name}" id="inputProjectName" />
		</s:FormItem>
		
		<s:FormItem label="Description"  width="100%">
			<s:TextInput id="inputProjectDescription" text="{_project.description}" width="100%" />
		</s:FormItem>				
	</s:HGroup>
	
	<s:HGroup width="100%" height="100%">
		<s:VGroup height="100%" width="25%">
			<mx:DataGrid id="bundleList" dataProvider="{_project.bundleList}" width="100%" height="100%" >
				<mx:columns>
					<mx:DataGridColumn headerText="Bundles" 
									   fontWeight="bold"/>
				</mx:columns>
			</mx:DataGrid>
			<s:HGroup gap="0" width="100%">
				<s:TextInput id="inputNewBundle" width="100%" prompt="New Bundle"/>
				<mx:Button icon="@Embed('assets/add.png')" label="" id="btnAddBundle" click="btnAddBundle_clickHandler(event)" width="30" />
			</s:HGroup>
		</s:VGroup>
		
		<mx:DataGrid id="projectLanguagesGrid" dataProvider="{projectLanguageCodes}" width="45%" height="100%" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" allowMultipleSelection="true">
			<mx:columns>
				<mx:DataGridColumn headerText="Project Languages" 
								   labelFunction="{getLanguageName}" 
								   dataField="language"
								   fontWeight="bold"/>
				
				<mx:DataGridColumn dataField="export"  
								   width="80"
								   textAlign="center"
								   rendererIsEditor="true" >
					<mx:itemRenderer>
						<fx:Component>
							<mx:Box width="100%" height="100%" horizontalAlign="center"
									verticalAlign="middle">
								<mx:CheckBox selected="{data.export}"  click="{data.export = !data.export}"/>
							</mx:Box>
						</fx:Component>
					</mx:itemRenderer>
					
				</mx:DataGridColumn>
				
			</mx:columns>
		</mx:DataGrid>	
		
		<mx:DataGrid id="availableLanguagesGrid" dataProvider="{availableLanguageCodes}" width="30%" height="100%" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true"  allowMultipleSelection="true">
			<mx:columns>
				<mx:DataGridColumn headerText="Available Languages" labelFunction="{getLanguageName}"/>
			</mx:columns>
		</mx:DataGrid>
	</s:HGroup>
	
	<s:HGroup>
		<s:Button click="save_clickHandler(event)" label="save" fontWeight="bold" />
		<components:FormMessage  id="message" />
	</s:HGroup>
	
	
</s:VGroup>
