<?xml version="1.0" encoding="utf-8"?>
<s:Group  width="100%" height="100%" 
		  xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"  
		  xmlns:projectistrationservices="services.projectistrationservices.*" 
		  xmlns:projectservice="services.projectservice.*" 
		  xmlns:valueObjects="valueObjects.*"
		  xmlns:components="com.amadeus.ori.translate.ui.components.*" 
		  xmlns:project="com.amadeus.ori.translate.ui.project.*"
		  creationComplete="creationCompleteHandler(event)">
	
	
	<fx:Script>
		<![CDATA[ 
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var projectsGridDataProvider:ArrayCollection;			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				stage.addEventListener(ProjectEvent.PROJECTS_UPDATED, listProjects);	
			}
			
			protected function listProjects(event:Event=null):void
			{
				listProjectsResult.token = projectService.listProjects(FlexGlobals.topLevelApplication.engineBaseUrl);
			}		
			
			
			protected function listProjectsResult_resultHandler(event:ResultEvent):void
			{
				
				projectsGridDataProvider =  listProjectsResult.lastResult.project;
				
			}
			
			
			protected function projectsGrid_changeHandler(event:ListEvent):void
			{
				this.selectedItem = Project(projectsGrid.selectedItem);
			}
			
			
			
			private function matchChanged():void 
			{ 
				projectsGridDataProvider.filterFunction = filterProjects;
				projectsGridDataProvider.refresh();
			}
			
			private function clearSearch():void
			{
				projectsGridDataProvider.filterFunction = null;
				projectsGridDataProvider.refresh();
				search.text = '';
			}
			
			private function filterProjects(item:Object):Boolean
			{
				var proj:Project = Project(item);
				if( proj.id.toLowerCase().search( search.text.toLowerCase()) != -1 )
				{
					return true;
				}              
				if( proj.name.toLowerCase().search( search.text.toLowerCase()) != -1 )
				{
					return true;
				}
				if( proj.description.toLowerCase().search( search.text.toLowerCase()) != -1 )
				{
					return true;
				}				
				return false;              
			}
			
			
			public function askDeleteProject(project:Object):void{
				
				var alert:Alert = Alert.show("Are you sure you want to delete project " + project.name + "?\nThis will delete ALL translations for this project!!!", "Delete Project", Alert.YES | Alert.NO);				
				alert.addEventListener(CloseEvent.CLOSE, deleteProject);
			}
			
			private function deleteProject(evt:CloseEvent):void {
				
				switch (evt.detail) {
					case Alert.YES:
						deleteProjectResult.token = projectService.deleteProject(FlexGlobals.topLevelApplication.engineBaseUrl, selectedItem.id);			
						break;
				}
			}				
			
			protected function btnNewProject_clickHandler(event:MouseEvent):void
			{
				var w:NewProjectWindow = new NewProjectWindow();
				PopUpManager.addPopUp(w, this, true);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<projectservice:ProjectService id="projectService" fault="Alert.show(event.fault.content.toString())" showBusyCursor="true"/>
		<s:CallResponder id="deleteProjectResult" result="{stage.dispatchEvent(new ProjectEvent(ProjectEvent.PROJECTS_UPDATED))}"/>
		<s:CallResponder id="createProjectResult" result="{stage.dispatchEvent(new ProjectEvent(ProjectEvent.PROJECTS_UPDATED))}"/>
		<s:CallResponder id="listProjectsResult" result="listProjectsResult_resultHandler(event)"/>
		
		<valueObjects:Project id="selectedItem" />
		
		
	</fx:Declarations>
	
	<mx:VDividedBox width="100%" height="100%">
		
		<s:VGroup width="100%" >
			<mx:Spacer height="5"/>
			<s:HGroup  width="100%" >
				<mx:Button label="Add new project" click="btnNewProject_clickHandler(event)"  id="btnNewProject" height="23" icon="@Embed(source='assets/add.png')"/>
				<mx:Spacer width="100%"/>				
				<mx:Label text="Search:"  fontWeight="bold" fontSize="12"/> 
				<mx:TextInput id="search" change="{matchChanged()}" width="240" toolTip="Type in the search text" />
				<mx:Button id="btnReset" label="Reset" click="{clearSearch()}"  height="23" right="0"/>
				<mx:Button  icon="@Embed(source='assets/reload.png')" label="reload" click="{listProjects()}" height="23" width="23"/>
			</s:HGroup>
			<mx:DataGrid width="100%" height="100%" id="projectsGrid" 
						 editable="false" creationComplete="listProjects(event)"
						 change="projectsGrid_changeHandler(event)"
						 dataProvider="{projectsGridDataProvider}">
				<mx:columns>				
					<mx:DataGridColumn headerText="Name" dataField="name"  fontWeight="bold"/>
					<mx:DataGridColumn editable="false"  textAlign="center" width="80">
						<mx:itemRenderer>
							<fx:Component>
								<mx:LinkButton icon="@Embed('assets/delete.png')" label="delete" click="{outerDocument.askDeleteProject(data) }" />											
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>	
				
			</mx:DataGrid> 			
		</s:VGroup>
		
		<project:ProjectPanelForm  	 id="form" 
									 includeInLayout="{projectsGrid.selectedIndex > -1}" 
									 visible="{projectsGrid.selectedIndex > -1}" 
									 project="{Project(projectsGrid.selectedItem)}"/>
		
	</mx:VDividedBox>
</s:Group>