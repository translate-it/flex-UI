<?xml version="1.0" encoding="utf-8"?>
<s:Group  width="100%" height="100%" 
		   xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"  xmlns:useristrationservices="services.useristrationservices.*" xmlns:userservice="services.userservice.*" xmlns:valueObjects="valueObjects.*"
		   xmlns:components="com.amadeus.ori.translate.ui.components.*" xmlns:user="com.amadeus.ori.translate.ui.user.*"
		   creationComplete="creationCompleteHandler(event)">

	
	<fx:Script>
		<![CDATA[ 
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var usersGridDataProvider:ArrayCollection;			

			protected function creationCompleteHandler(event:FlexEvent):void
			{

				
			}
			
			protected function listUsers(event:Event=null):void
			{
				listUsersResult.token = userService.listUsers(FlexGlobals.topLevelApplication.engineBaseUrl);
			}
			
			private function generateNewUser():Object
			{
				
				return { code: "", name: "", urlPattern: "" };
			}
			
			private function isObjectEmpty(obj:Object):Boolean
			{
				return obj.code == "" && obj.name == "";
			}
			
			
			
			protected function listUsersResult_resultHandler(event:ResultEvent):void
			{
				
				usersGridDataProvider =  listUsersResult.lastResult.user;
				
			}
			

			protected function usersGrid_changeHandler(event:ListEvent):void
			{
				this.selectedItem = User(usersGrid.selectedItem);
			}



			private function matchChanged():void 
			{ 
				usersGridDataProvider.filterFunction = filterUsers;
				usersGridDataProvider.refresh();
			}
			
			private function clearSearch():void
			{
				usersGridDataProvider.filterFunction = null;
				usersGridDataProvider.refresh();
				search.text = '';
			}
			
			private function filterUsers(item:Object):Boolean
			{

				if( item.lastName.toLowerCase().search( search.text.toLowerCase()) != -1 )
				{
					return true;
				}              
				if( item.firstName.toLowerCase().search( search.text.toLowerCase()) != -1 )
				{
					return true;
				}
				if( item.email.toLowerCase().search( search.text.toLowerCase()) != -1 )
				{
					return true;
				}				
				return false;              
			}

			
			public function askDeleteUser(user:Object):void{
				
				var alert:Alert = Alert.show("Delete user " + user.username + "?", "Delete User", Alert.YES | Alert.NO);				
					alert.addEventListener(CloseEvent.CLOSE, deleteUser);
			}
			
			private function deleteUser(evt:CloseEvent):void {
				
				switch (evt.detail) {
					case Alert.YES:
						deleteUserResult.token = userService.deleteUser(FlexGlobals.topLevelApplication.engineBaseUrl, selectedItem.username);			
						break;
				}
			}				

			protected function btnNewUser_clickHandler(event:MouseEvent):void
			{
				var w:NewUserWindow = new NewUserWindow();
					w.addEventListener(UserEvent.NEW_USER_CREATED, listUsers);					
				 	PopUpManager.addPopUp(w, this, true);
			}


			protected function form_userUpdatedHandler(evt:UserEvent):void
			{
				usersGridDataProvider.setItemAt(evt.user, usersGrid.selectedIndex);
				selectedItem = evt.user;
			}


			protected function btnSendMail_clickHandler(event:MouseEvent):void
			{
				var w:MailWindow = new MailWindow();	
				    w.userList = this.usersGridDataProvider;
				PopUpManager.addPopUp(w, this, true);
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		
		<userservice:UserService id="userService" fault="Alert.show(event.fault.content.toString())" showBusyCursor="true"/>
		<s:CallResponder id="deleteUserResult" result="{listUsers()}"/>
		<s:CallResponder id="createUserResult" result="{listUsers()}"/>
		<s:CallResponder id="listUsersResult" result="listUsersResult_resultHandler(event)"/>
		
		<valueObjects:User id="selectedItem" />
		
		
	</fx:Declarations>

	<mx:VDividedBox width="100%" height="100%">
		
		<s:VGroup width="100%" >
			<mx:Spacer height="5"/>
			<s:HGroup  width="100%" >
				<mx:Button label="Add new user" click="btnNewUser_clickHandler(event)"  id="btnNewUser" height="23" icon="@Embed(source='assets/add.png')"/>
				<mx:Button label="send mail" click="btnSendMail_clickHandler(event)"  id="btnSendMail" height="23" />
				<mx:Spacer width="100%"/>				
				<mx:Label text="Search:"  fontWeight="bold" fontSize="12"/> 
				<mx:TextInput id="search" change="{matchChanged()}" width="240" toolTip="Type in the search text" />
				<mx:Button id="btnReset" label="Reset" click="{clearSearch()}"  height="23" right="0"/>
				<mx:Button  icon="@Embed(source='assets/reload.png')" label="reload" click="{listUsers()}" height="23" width="23"/>
			</s:HGroup>
			<mx:DataGrid width="100%" height="100%" id="usersGrid" 
						 editable="false" creationComplete="listUsers(event)"
						 change="usersGrid_changeHandler(event)"
						 dataProvider="{usersGridDataProvider}">
				<mx:columns>
					<mx:DataGridColumn headerText="Username" dataField="username"  width="220"  fontWeight="bold"
									   itemRenderer="com.amadeus.ori.translate.ui.components.UserGridItemRenderer"
									   paddingLeft="8"/>
					<mx:DataGridColumn headerText="Name" dataField="lastName"  width="160" />
					<mx:DataGridColumn headerText="First Name" dataField="firstName"  width="120" />
					<mx:DataGridColumn headerText="E-Mail Address" dataField="email" editable="true" width="200" fontWeight="bold" />					
					<mx:DataGridColumn headerText="Google" dataField="googleAccount"  width="40" />
					<mx:DataGridColumn editable="false"  textAlign="center" width="60">
						<mx:itemRenderer>
							<fx:Component>
								<mx:LinkButton icon="@Embed('assets/delete.png')" label="delete" click="{outerDocument.askDeleteUser(data) }" />											
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>	
				
			</mx:DataGrid> 			
		</s:VGroup>
		
		<user:UserPanelForm  id="form" userUpdated="form_userUpdatedHandler(event)"  
							 includeInLayout="{usersGrid.selectedIndex > -1}" visible="{usersGrid.selectedIndex > -1}" user="{usersGrid.selectedItem}"/>

	</mx:VDividedBox>

			
</s:Group>